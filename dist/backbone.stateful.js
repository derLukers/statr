(function(root, factory) {
  var StateManager, exports, _;
  if (typeof define === 'function' && define.amd) {
    define('State', ['StateManager', 'underscore'], function(StateManager, _) {
      return root.State = factory(StateManager, _);
    });
  } else if (typeof exports !== 'undefined') {
    StateManager = require('StateManager');
    _ = require('underscore');
    exports.State = factory(StateManager, _);
    if (typeof module !== 'undefined' && module.exports) {
      return exports = module.exports = factory(StateManager, _);
    }
  } else {
    return root.State = factory(StateManager, _);
  }
})(this, function(StateManager, _) {
  'use strict';
  var State;
  _.templateSettings = {
    interpolate: /:([a-zA-Z0-9_]+)/g
  };
  return State = (function() {
    State.prototype.isActive = false;

    function State() {
      StateManager.registerState(this);
    }

    State.prototype.doResolve = function(parameters, parentResolveResults) {
      var deferred, name, resolveFunction, resultPromise, subPromiseList, _ref;
      if (parentResolveResults == null) {
        parentResolveResults = {};
      }
      resultPromise = $.Deferred();
      if (!this.resolve) {
        resultPromise.resolve(parentResolveResults);
        return resultPromise;
      } else {
        subPromiseList = [];
        _ref = this.resolve;
        for (name in _ref) {
          resolveFunction = _ref[name];
          deferred = resolveFunction.apply(this, parameters, parentResolveResults);
          deferred.name = name;
          subPromiseList.push(deferred);
        }
        ($.when.apply($, subPromiseList)).then(function() {
          var index, subPromise;
          for (index in subPromiseList) {
            subPromise = subPromiseList[index];
            parentResolveResults[subPromise.name] = arguments[index];
          }
          return resultPromise.resolve(parentResolveResults);
        });
      }
      return resultPromise;
    };

    State.prototype.activate = function(parameters, child, activationPromise) {
      var initial, resolvePromise, _ref;
      if (child == null) {
        child = null;
      }
      if (activationPromise == null) {
        activationPromise = $.Deferred();
      }
      initial = child === null;
      resolvePromise = $.Deferred();
      if (initial) {
        resolvePromise.then(function(resolveResult) {
          return activationPromise.resolve(resolveResult);
        });
      }
      if (this.currentChild !== child) {
        if ((_ref = this.currentChild) != null) {
          _ref.deactivate();
        }
        this.currentChild = child;
      }
      if (!(this.isActive && this.generateRoute(this.currentParameters) === this.generateRoute(parameters))) {
        if (this.parent) {
          this.parent.activate(parameters, this, activationPromise).then((function(_this) {
            return function(parentResolveResult) {
              return _this.doResolve(parameters, parentResolveResult).then(function(resolveResult) {
                _this.previousResolveResult = resolveResult;
                return resolvePromise.resolve(resolveResult);
              });
            };
          })(this));
        } else {
          this.doResolve(parameters).then((function(_this) {
            return function(resolveResult) {
              _this.previousResolveResult = resolveResult;
              return resolvePromise.resolve(resolveResult);
            };
          })(this));
        }
        this.currentChild = child;
        this.isActive = true;
      } else {
        resolvePromise.resolve(this.previousResolveResult);
      }
      activationPromise.then((function(_this) {
        return function(resolveResult) {
          return typeof _this.onActivate === "function" ? _this.onActivate(parameters, resolveResult) : void 0;
        };
      })(this));
      this.currentParameters = parameters;
      return resolvePromise;
    };

    State.prototype.deactivate = function() {
      var _ref;
      this.isActive = false;
      if (typeof this.onDeactivate === "function") {
        this.onDeactivate();
      }
      if ((_ref = this.currentChild) != null) {
        _ref.deactivate();
      }
      return this.currentChild = null;
    };

    State.prototype.generateRoute = function(parameters) {
      var _ref;
      return (((_ref = this.parent) != null ? _ref.generateRoute(parameters).length : void 0) ? this.parent.generateRoute(parameters) + '/' : '') + (this.route ? _.template(this.route)(parameters) : '');
    };

    State.prototype.generateRouteString = function() {
      var _ref;
      return (((_ref = this.parent) != null ? _ref.generateRouteString().length : void 0) ? this.parent.generateRouteString() + (this.route ? '/' : '') : '') + (this.route ? this.route : '');
    };

    State.prototype.generateName = function() {
      var _ref;
      return (((_ref = this.parent) != null ? _ref.statename : void 0) ? this.parent.generateName() + '.' : '') + this.statename;
    };

    State.prototype.getParentChain = function() {
      var chain, _ref;
      chain = ((_ref = this.parent) != null ? _ref.getParentChain() : void 0) || [];
      chain.push(this);
      return chain;
    };

    return State;

  })();
});

//# sourceMappingURL=data:application/json;base64,
(function(root, factory) {
  var Backbone, exports, _;
  if (typeof define === 'function' && define.amd) {
    define('StateManager', ['underscore', 'backbone'], function(_, Backbone) {
      return root.StateManager = new (factory(_, Backbone));
    });
  } else if (typeof exports !== 'undefined') {
    _ = require('underscore');
    Backbone = require('Backbone');
    exports.StateManager = new (factory(_, Backbone));
    if (typeof module !== 'undefined' && module.exports) {
      return exports = module.exports = new StateManager;
    }
  } else {
    return root.StateManager = new (factory(_, Backbone));
  }
})(this, function(_, Backbone) {
  var StateManager;
  return StateManager = (function() {
    var activeState, states;

    states = {};

    activeState = null;

    StateManager.prototype.router = new Backbone.Router();

    StateManager.prototype.go = function(name, parameters, options) {
      var state;
      if (options == null) {
        options = {
          navigate: true
        };
      }
      if (!states[name]) {
        throw new Error('No State with name "' + name + "' found.");
      }
      state = states[name];
      state.activate(parameters);
      activeState = state;
      if (options.navigate && !state.abstract && state.route) {
        return this.router.navigate(state.generateRoute(parameters));
      }
    };

    StateManager.prototype.registerState = function(state) {
      var name;
      name = state.generateName();
      if (states[state.generateName()]) {
        throw new Error('State with name "' + name + '" already exists.');
      }
      states[state.generateName()] = state;
      if ((state.route || state.route === '') && !state.abstract) {
        return this.router.route(state.generateRouteString(), state.generateName(), function(parameters) {
          var _arguments;
          _arguments = arguments;
          parameters = _.object(_.map(state.generateRouteString().match(/:([a-zA-Z0-9\-_]+)/g), function(name, index) {
            return [name.substring(1), _arguments[index]];
          }));
          return state.activate(parameters);
        });
      }
    };

    StateManager.prototype.getState = function(name) {
      return states[name];
    };

    StateManager.prototype.clear = function() {
      if (activeState != null) {
        activeState.getParentChain()[0].deactivate();
      }
      return states = {};
    };

    function StateManager() {
      this.clear();
    }

    return StateManager;

  })();
});

//# sourceMappingURL=data:application/json;base64,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QUEsQ0FiUixDQUFBLENBQUEiLCJmaWxlIjoiU3RhdGVNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiKChyb290LCBmYWN0b3J5KS0+XG4gIGlmIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyBhbmQgZGVmaW5lLmFtZFxuICAgIGRlZmluZSAnU3RhdGVNYW5hZ2VyJywgWyd1bmRlcnNjb3JlJywgJ2JhY2tib25lJ10sIChfLCBCYWNrYm9uZSktPlxuICAgICAgcm9vdC5TdGF0ZU1hbmFnZXIgPSBuZXcgKGZhY3RvcnkgXywgQmFja2JvbmUpXG4gICAgcmV0dXJuXG4gIGVsc2UgaWYgdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCdcbiAgICBfID0gcmVxdWlyZSAndW5kZXJzY29yZSdcbiAgICBCYWNrYm9uZSA9IHJlcXVpcmUgJ0JhY2tib25lJ1xuICAgIGV4cG9ydHMuU3RhdGVNYW5hZ2VyID0gbmV3IChmYWN0b3J5IF8sIEJhY2tib25lKVxuICAgIGlmIHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgYW5kIG1vZHVsZS5leHBvcnRzXG4gICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBuZXcgU3RhdGVNYW5hZ2VyXG4gIGVsc2VcbiAgICByb290LlN0YXRlTWFuYWdlciA9IG5ldyAoZmFjdG9yeSBfLCBCYWNrYm9uZSlcbikodGhpcywgKF8sIEJhY2tib25lKSAtPlxuICBjbGFzcyBTdGF0ZU1hbmFnZXJcbiAgICBzdGF0ZXMgPSB7fVxuICAgIGFjdGl2ZVN0YXRlID0gbnVsbFxuICAgIHJvdXRlcjogbmV3IEJhY2tib25lLlJvdXRlcigpXG4gICAgZ286IChuYW1lLCBwYXJhbWV0ZXJzLCBvcHRpb25zID0ge25hdmlnYXRlOiB0cnVlfSkgLT5cbiAgICAgIHVubGVzcyBzdGF0ZXNbbmFtZV1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yICdObyBTdGF0ZSB3aXRoIG5hbWUgXCInICsgbmFtZSArIFwiJyBmb3VuZC5cIlxuICAgICAgc3RhdGUgPSBzdGF0ZXNbbmFtZV1cbiAgICAgIHN0YXRlLmFjdGl2YXRlIHBhcmFtZXRlcnNcbiAgICAgIGFjdGl2ZVN0YXRlID0gc3RhdGVcbiAgICAgIGlmIG9wdGlvbnMubmF2aWdhdGUgJiYgIXN0YXRlLmFic3RyYWN0ICYmIHN0YXRlLnJvdXRlXG4gICAgICAgIEByb3V0ZXIubmF2aWdhdGUgc3RhdGUuZ2VuZXJhdGVSb3V0ZSBwYXJhbWV0ZXJzXG5cbiAgICByZWdpc3RlclN0YXRlOiAoc3RhdGUpIC0+XG4gICAgICBuYW1lID0gc3RhdGUuZ2VuZXJhdGVOYW1lKClcbiAgICAgIGlmIHN0YXRlc1tzdGF0ZS5nZW5lcmF0ZU5hbWUoKV1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdGF0ZSB3aXRoIG5hbWUgXCInICsgbmFtZSArICdcIiBhbHJlYWR5IGV4aXN0cy4nKVxuICAgICAgc3RhdGVzW3N0YXRlLmdlbmVyYXRlTmFtZSgpXSA9IHN0YXRlXG4gICAgICBpZiAoc3RhdGUucm91dGUgb3Igc3RhdGUucm91dGU9PScnKSAmJiAhc3RhdGUuYWJzdHJhY3RcbiAgICAgICAgQHJvdXRlci5yb3V0ZSBzdGF0ZS5nZW5lcmF0ZVJvdXRlU3RyaW5nKCksIHN0YXRlLmdlbmVyYXRlTmFtZSgpLFxuICAgICAgICAgIChwYXJhbWV0ZXJzKS0+XG4gICAgICAgICAgICBfYXJndW1lbnRzID0gYXJndW1lbnRzXG4gICAgICAgICAgICBwYXJhbWV0ZXJzID0gXy5vYmplY3QgXy5tYXAoXG4gICAgICAgICAgICAgIHN0YXRlLmdlbmVyYXRlUm91dGVTdHJpbmcoKS5tYXRjaCgvOihbYS16QS1aMC05XFwtX10rKS9nKSxcbiAgICAgICAgICAgICAgKG5hbWUsIGluZGV4KS0+XG4gICAgICAgICAgICAgICAgW25hbWUuc3Vic3RyaW5nKDEpLCBfYXJndW1lbnRzW2luZGV4XV1cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHN0YXRlLmFjdGl2YXRlIHBhcmFtZXRlcnNcblxuICAgIGdldFN0YXRlOiAobmFtZSktPlxuICAgICAgc3RhdGVzW25hbWVdXG5cbiAgICBjbGVhcjogKCktPlxuICAgICAgYWN0aXZlU3RhdGU/LmdldFBhcmVudENoYWluKClbMF0uZGVhY3RpdmF0ZSgpXG4gICAgICBzdGF0ZXMgPSB7fVxuXG4gICAgY29uc3RydWN0b3I6IC0+XG4gICAgICBAY2xlYXIoKVxuKSJdfQ==