define(['underscore', 'backbone'], function(_, backbone) {
  var StateManager;
  return window.foo = new (StateManager = (function() {
    var activeState, states;

    states = {};

    activeState = null;

    StateManager.prototype.router = new backbone.Router();

    StateManager.prototype.go = function(name, parameters, options) {
      var state;
      if (options == null) {
        options = {
          navigate: true
        };
      }
      if (!states[name]) {
        throw new Error('No State with name "' + name + "' found.");
      }
      state = states[name];
      state.activate(parameters);
      activeState = state;
      if (options.navigate && !state.abstract && state.route) {
        return this.router.navigate(state.generateRoute(parameters));
      }
    };

    StateManager.prototype.registerState = function(state) {
      var name;
      name = state.generateName();
      if (states[state.generateName()]) {
        throw new Error('State with name "' + name + '" already exists.');
      }
      states[state.generateName()] = state;
      if (state.route && !state.abstract) {
        return this.router.route(state.generateRouteString(), state.generateName(), function(parameters) {
          var _arguments;
          _arguments = arguments;
          parameters = _.object(_.map(state.generateRouteString().match(/:([a-zA-Z0-9\-_]+)/g), function(name, index) {
            return [name.substring(1), _arguments[index]];
          }));
          return state.activate(parameters);
        });
      }
    };

    StateManager.prototype.getState = function(name) {
      return states[name];
    };

    StateManager.prototype.clear = function() {
      if (activeState != null) {
        activeState.getParentChain()[0].deactivate();
      }
      return states = {};
    };

    function StateManager() {
      this.clear();
    }

    return StateManager;

  })());
});

//# sourceMappingURL=data:application/json;base64,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QVcsQ0FBRSxjQUFiLENBQUEsQ0FBOEIsQ0FBQSxDQUFBLENBQUUsQ0FBQyxVQUFqQyxDQUFBO09BQUE7YUFDQSxNQUFBLEdBQVMsR0FGSjtJQUFBLENBL0JQLENBQUE7O0FBbUNhLElBQUEsc0JBQUEsR0FBQTtBQUNYLE1BQUEsSUFBQyxDQUFBLEtBQUQsQ0FBQSxDQUFBLENBRFc7SUFBQSxDQW5DYjs7d0JBQUE7O1FBRkQ7QUFBQSxDQUZILENBQUEsQ0FBQSIsImZpbGUiOiJTdGF0ZU1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUgW1xuICAndW5kZXJzY29yZScsICdiYWNrYm9uZSdcbl0sIChfLCBiYWNrYm9uZSkgLT5cbiAgd2luZG93LmZvbyA9IG5ldyBjbGFzcyBTdGF0ZU1hbmFnZXJcbiAgICBzdGF0ZXMgPSB7fVxuICAgIGFjdGl2ZVN0YXRlID0gbnVsbFxuICAgIHJvdXRlcjogbmV3IGJhY2tib25lLlJvdXRlcigpXG4gICAgZ286IChuYW1lLCBwYXJhbWV0ZXJzLCBvcHRpb25zID0ge25hdmlnYXRlOiB0cnVlfSkgLT5cbiAgICAgIHVubGVzcyBzdGF0ZXNbbmFtZV1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yICdObyBTdGF0ZSB3aXRoIG5hbWUgXCInICsgbmFtZSArIFwiJyBmb3VuZC5cIlxuICAgICAgc3RhdGUgPSBzdGF0ZXNbbmFtZV1cbiAgICAgIHN0YXRlLmFjdGl2YXRlIHBhcmFtZXRlcnNcbiAgICAgIGFjdGl2ZVN0YXRlID0gc3RhdGVcbiAgICAgIGlmIG9wdGlvbnMubmF2aWdhdGUgJiYgIXN0YXRlLmFic3RyYWN0ICYmIHN0YXRlLnJvdXRlXG4gICAgICAgIEByb3V0ZXIubmF2aWdhdGUgc3RhdGUuZ2VuZXJhdGVSb3V0ZSBwYXJhbWV0ZXJzXG5cbiAgICByZWdpc3RlclN0YXRlOiAoc3RhdGUpIC0+XG4gICAgICBuYW1lID0gc3RhdGUuZ2VuZXJhdGVOYW1lKClcbiAgICAgIGlmIHN0YXRlc1tzdGF0ZS5nZW5lcmF0ZU5hbWUoKV1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdGF0ZSB3aXRoIG5hbWUgXCInICsgbmFtZSArICdcIiBhbHJlYWR5IGV4aXN0cy4nKVxuICAgICAgc3RhdGVzW3N0YXRlLmdlbmVyYXRlTmFtZSgpXSA9IHN0YXRlXG4gICAgICBpZiBzdGF0ZS5yb3V0ZSAmJiAhc3RhdGUuYWJzdHJhY3RcbiAgICAgICAgQHJvdXRlci5yb3V0ZSBzdGF0ZS5nZW5lcmF0ZVJvdXRlU3RyaW5nKCksIHN0YXRlLmdlbmVyYXRlTmFtZSgpLFxuICAgICAgICAgIChwYXJhbWV0ZXJzKS0+XG4gICAgICAgICAgICBfYXJndW1lbnRzID0gYXJndW1lbnRzXG4gICAgICAgICAgICBwYXJhbWV0ZXJzID0gXy5vYmplY3QgXy5tYXAoXG4gICAgICAgICAgICAgIHN0YXRlLmdlbmVyYXRlUm91dGVTdHJpbmcoKS5tYXRjaCgvOihbYS16QS1aMC05XFwtX10rKS9nKSxcbiAgICAgICAgICAgICAgKG5hbWUsIGluZGV4KS0+XG4gICAgICAgICAgICAgICAgW25hbWUuc3Vic3RyaW5nKDEpLCBfYXJndW1lbnRzW2luZGV4XV1cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHN0YXRlLmFjdGl2YXRlIHBhcmFtZXRlcnNcblxuICAgIGdldFN0YXRlOiAobmFtZSktPlxuICAgICAgc3RhdGVzW25hbWVdXG5cbiAgICBjbGVhcjogKCktPlxuICAgICAgYWN0aXZlU3RhdGU/LmdldFBhcmVudENoYWluKClbMF0uZGVhY3RpdmF0ZSgpXG4gICAgICBzdGF0ZXMgPSB7fVxuXG4gICAgY29uc3RydWN0b3I6IC0+XG4gICAgICBAY2xlYXIoKSJdfQ==