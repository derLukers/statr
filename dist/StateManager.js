(function(root, factory) {
  var Backbone, exports;
  if (typeof define === 'function' && define.amd) {
    define('StateManager', ['backbone'], function(Backbone) {
      return root.StateManager = new (factory(Backbone));
    });
  } else if (typeof exports !== 'undefined') {
    Backbone = require('Backbone');
    exports.StateManager = new (factory(Backbone));
    if (typeof module !== 'undefined' && module.exports) {
      return exports = module.exports = new StateManager;
    }
  } else {
    return root.StateManager = new (factory(Backbone));
  }
})(this, function(Backbone) {
  var StateManager;
  return StateManager = (function() {
    var activeState, states;

    states = {};

    activeState = null;

    StateManager.prototype.router = new Backbone.Router();

    StateManager.prototype.go = function(name, parameters, options) {
      var state;
      if (parameters == null) {
        parameters = {};
      }
      if (options == null) {
        options = {
          navigate: true
        };
      }
      if (!states[name]) {
        throw new Error('No State with name "' + name + "' found.");
      }
      state = states[name];
      state.activate(parameters);
      activeState = state;
      if (options.navigate && !state.abstract && state.route) {
        return this.router.navigate(state.generateRoute(parameters));
      }
    };

    StateManager.prototype.registerState = function(state) {
      var name;
      name = state.generateName();
      if (states[state.generateName()]) {
        throw new Error('State with name "' + name + '" already exists.');
      }
      states[state.generateName()] = state;
      if ((state.route || state.route === '') && !state.abstract) {
        return this.router.route(state.generateRouteString(), state.generateName(), function() {
          var index, parameters, _arguments, _i, _len, _ref;
          _arguments = arguments;
          parameters = {};
          _ref = state.generateRouteString().match(/:([a-zA-Z0-9\-_]+)/g);
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            name = _ref[index];
            parameters[name.substring(1)] = _arguments[index];
          }
          return state.activate(parameters);
        });
      }
    };

    StateManager.prototype.getState = function(name) {
      return states[name];
    };

    StateManager.prototype.clear = function() {
      if (activeState != null) {
        activeState.getParentChain()[0].deactivate();
      }
      return states = {};
    };

    function StateManager() {
      this.clear();
    }

    return StateManager;

  })();
});

//# sourceMappingURL=data:application/json;base64,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QSxJQUFvQyxDQUFBLEtBQU0sQ0FBQyxRQUE5QztlQUNFLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBUixDQUFjLEtBQUssQ0FBQyxtQkFBTixDQUFBLENBQWQsRUFBMkMsS0FBSyxDQUFDLFlBQU4sQ0FBQSxDQUEzQyxFQUNFLFNBQUEsR0FBQTtBQUNFLGNBQUEsNkNBQUE7QUFBQSxVQUFBLFVBQUEsR0FBYSxTQUFiLENBQUE7QUFBQSxVQUNBLFVBQUEsR0FBYSxFQURiLENBQUE7QUFFQTtBQUFBLGVBQUEsMkRBQUE7K0JBQUE7QUFDRSxZQUFBLFVBQVcsQ0FBQSxJQUFJLENBQUMsU0FBTCxDQUFlLENBQWYsQ0FBQSxDQUFYLEdBQWdDLFVBQVcsQ0FBQSxLQUFBLENBQTNDLENBREY7QUFBQSxXQUZBO2lCQUlBLEtBQUssQ0FBQyxRQUFOLENBQWUsVUFBZixFQUxGO1FBQUEsQ0FERixFQURGO09BTGE7SUFBQSxDQVpmLENBQUE7O0FBQUEsMkJBMEJBLFFBQUEsR0FBVSxTQUFDLElBQUQsR0FBQTthQUNSLE1BQU8sQ0FBQSxJQUFBLEVBREM7SUFBQSxDQTFCVixDQUFBOztBQUFBLDJCQTZCQSxLQUFBLEdBQU8sU0FBQSxHQUFBOztRQUNMLFdBQVcsQ0FBRSxjQUFiLENBQUEsQ0FBOEIsQ0FBQSxDQUFBLENBQUUsQ0FBQyxVQUFqQyxDQUFBO09BQUE7YUFDQSxNQUFBLEdBQVMsR0FGSjtJQUFBLENBN0JQLENBQUE7O0FBaUNhLElBQUEsc0JBQUEsR0FBQTtBQUNYLE1BQUEsSUFBQyxDQUFBLEtBQUQsQ0FBQSxDQUFBLENBRFc7SUFBQSxDQWpDYjs7d0JBQUE7O09BRkk7QUFBQSxDQVpSLENBQUEsQ0FBQSIsImZpbGUiOiJTdGF0ZU1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIoKHJvb3QsIGZhY3RvcnkpLT5cbiAgaWYgdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nIGFuZCBkZWZpbmUuYW1kXG4gICAgZGVmaW5lICdTdGF0ZU1hbmFnZXInLCBbJ2JhY2tib25lJ10sIChCYWNrYm9uZSktPlxuICAgICAgcm9vdC5TdGF0ZU1hbmFnZXIgPSBuZXcgKGZhY3RvcnkgQmFja2JvbmUpXG4gICAgcmV0dXJuXG4gIGVsc2UgaWYgdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCdcbiAgICBCYWNrYm9uZSA9IHJlcXVpcmUgJ0JhY2tib25lJ1xuICAgIGV4cG9ydHMuU3RhdGVNYW5hZ2VyID0gbmV3IChmYWN0b3J5ICBCYWNrYm9uZSlcbiAgICBpZiB0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnIGFuZCBtb2R1bGUuZXhwb3J0c1xuICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gbmV3IFN0YXRlTWFuYWdlclxuICBlbHNlXG4gICAgcm9vdC5TdGF0ZU1hbmFnZXIgPSBuZXcgKGZhY3RvcnkgQmFja2JvbmUpXG4pIHRoaXMsIChCYWNrYm9uZSkgLT5cbiAgY2xhc3MgU3RhdGVNYW5hZ2VyXG4gICAgc3RhdGVzID0ge31cbiAgICBhY3RpdmVTdGF0ZSA9IG51bGxcbiAgICByb3V0ZXI6IG5ldyBCYWNrYm9uZS5Sb3V0ZXIoKVxuICAgIGdvOiAobmFtZSwgcGFyYW1ldGVycz17fSwgb3B0aW9ucyA9IHtuYXZpZ2F0ZTogdHJ1ZX0pIC0+XG4gICAgICB1bmxlc3Mgc3RhdGVzW25hbWVdXG4gICAgICAgIHRocm93IG5ldyBFcnJvciAnTm8gU3RhdGUgd2l0aCBuYW1lIFwiJyArIG5hbWUgKyBcIicgZm91bmQuXCJcbiAgICAgIHN0YXRlID0gc3RhdGVzW25hbWVdXG4gICAgICBzdGF0ZS5hY3RpdmF0ZSBwYXJhbWV0ZXJzXG4gICAgICBhY3RpdmVTdGF0ZSA9IHN0YXRlXG4gICAgICBpZiBvcHRpb25zLm5hdmlnYXRlICYmICFzdGF0ZS5hYnN0cmFjdCAmJiBzdGF0ZS5yb3V0ZVxuICAgICAgICBAcm91dGVyLm5hdmlnYXRlIHN0YXRlLmdlbmVyYXRlUm91dGUgcGFyYW1ldGVyc1xuXG4gICAgcmVnaXN0ZXJTdGF0ZTogKHN0YXRlKSAtPlxuICAgICAgbmFtZSA9IHN0YXRlLmdlbmVyYXRlTmFtZSgpXG4gICAgICBpZiBzdGF0ZXNbc3RhdGUuZ2VuZXJhdGVOYW1lKCldXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3RhdGUgd2l0aCBuYW1lIFwiJyArIG5hbWUgKyAnXCIgYWxyZWFkeSBleGlzdHMuJylcbiAgICAgIHN0YXRlc1tzdGF0ZS5nZW5lcmF0ZU5hbWUoKV0gPSBzdGF0ZVxuICAgICAgaWYgKHN0YXRlLnJvdXRlIG9yIHN0YXRlLnJvdXRlPT0nJykgJiYgIXN0YXRlLmFic3RyYWN0XG4gICAgICAgIEByb3V0ZXIucm91dGUgc3RhdGUuZ2VuZXJhdGVSb3V0ZVN0cmluZygpLCBzdGF0ZS5nZW5lcmF0ZU5hbWUoKSxcbiAgICAgICAgICAtPlxuICAgICAgICAgICAgX2FyZ3VtZW50cyA9IGFyZ3VtZW50c1xuICAgICAgICAgICAgcGFyYW1ldGVycyA9IHt9XG4gICAgICAgICAgICBmb3IgbmFtZSwgaW5kZXggaW4gKHN0YXRlLmdlbmVyYXRlUm91dGVTdHJpbmcoKS5tYXRjaCgvOihbYS16QS1aMC05XFwtX10rKS9nKSlcbiAgICAgICAgICAgICAgcGFyYW1ldGVyc1tuYW1lLnN1YnN0cmluZygxKV0gPSBfYXJndW1lbnRzW2luZGV4XVxuICAgICAgICAgICAgc3RhdGUuYWN0aXZhdGUgcGFyYW1ldGVyc1xuXG4gICAgZ2V0U3RhdGU6IChuYW1lKS0+XG4gICAgICBzdGF0ZXNbbmFtZV1cblxuICAgIGNsZWFyOiAoKS0+XG4gICAgICBhY3RpdmVTdGF0ZT8uZ2V0UGFyZW50Q2hhaW4oKVswXS5kZWFjdGl2YXRlKClcbiAgICAgIHN0YXRlcyA9IHt9XG5cbiAgICBjb25zdHJ1Y3RvcjogLT5cbiAgICAgIEBjbGVhcigpIl19