define('StateManager', ['backbone'], function(Backbone) {
  var StateManager;
  return new (StateManager = (function() {
    var activeState, states;

    states = {};

    activeState = null;

    StateManager.prototype.router = new Backbone.Router();

    StateManager.prototype.go = function(name, parameters, options) {
      var result, state;
      if (parameters == null) {
        parameters = {};
      }
      if (options == null) {
        options = {
          navigate: true
        };
      }
      if (!states[name]) {
        throw new Error('No State with name "' + name + "' found.");
      }
      state = states[name];
      result = state.activate(parameters);
      activeState = state;
      if (options.navigate && !state.abstract && state.route) {
        this.router.navigate(state.generateRoute(parameters));
      }
      return result;
    };

    StateManager.prototype.registerState = function(state) {
      var name;
      name = state.generateName();
      if (states[state.generateName()]) {
        throw new Error('State with name "' + name + '" already exists.');
      }
      states[state.generateName()] = state;
      if ((state.route || state.route === '') && !state.abstract) {
        return this.router.route(state.generateRouteString(), state.generateName(), function() {
          var index, matches, parameters, _arguments, _i, _len;
          _arguments = arguments;
          parameters = {};
          matches = state.generateRouteString().match(/:([a-zA-Z0-9\-_]+)/g);
          if (matches) {
            for (index = _i = 0, _len = matches.length; _i < _len; index = ++_i) {
              name = matches[index];
              parameters[name.substring(1)] = _arguments[index];
            }
          }
          return state.activate(parameters);
        });
      }
    };

    StateManager.prototype.getState = function(name) {
      return states[name];
    };

    StateManager.prototype.clear = function() {
      if (activeState != null) {
        activeState.getParentChain()[0].deactivate();
      }
      return states = {};
    };

    function StateManager() {
      this.clear();
    }

    return StateManager;

  })());
});

//# sourceMappingURL=data:application/json;base64,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QUFBO2FBQ1IsTUFBTyxDQUFBLElBQUEsRUFEQztJQUFBLENBN0JWLENBQUE7O0FBQUEsMkJBZ0NBLEtBQUEsR0FBTyxTQUFBLEdBQUE7O1FBQ0wsV0FBVyxDQUFFLGNBQWIsQ0FBQSxDQUE4QixDQUFBLENBQUEsQ0FBRSxDQUFDLFVBQWpDLENBQUE7T0FBQTthQUNBLE1BQUEsR0FBUyxHQUZKO0lBQUEsQ0FoQ1AsQ0FBQTs7QUFvQ2EsSUFBQSxzQkFBQSxHQUFBO0FBQ1gsTUFBQSxJQUFDLENBQUEsS0FBRCxDQUFBLENBQUEsQ0FEVztJQUFBLENBcENiOzt3QkFBQTs7UUFGaUM7QUFBQSxDQUFyQyxDQUFBLENBQUEiLCJmaWxlIjoiU3RhdGVNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lICdTdGF0ZU1hbmFnZXInLCBbJ2JhY2tib25lJ10sIChCYWNrYm9uZSktPlxuICBuZXcgY2xhc3MgU3RhdGVNYW5hZ2VyXG4gICAgc3RhdGVzID0ge31cbiAgICBhY3RpdmVTdGF0ZSA9IG51bGxcbiAgICByb3V0ZXI6IG5ldyBCYWNrYm9uZS5Sb3V0ZXIoKVxuICAgIGdvOiAobmFtZSwgcGFyYW1ldGVycz17fSwgb3B0aW9ucyA9IHtuYXZpZ2F0ZTogdHJ1ZX0pIC0+XG4gICAgICB1bmxlc3Mgc3RhdGVzW25hbWVdXG4gICAgICAgIHRocm93IG5ldyBFcnJvciAnTm8gU3RhdGUgd2l0aCBuYW1lIFwiJyArIG5hbWUgKyBcIicgZm91bmQuXCJcbiAgICAgIHN0YXRlID0gc3RhdGVzW25hbWVdXG4gICAgICByZXN1bHQgPSBzdGF0ZS5hY3RpdmF0ZSBwYXJhbWV0ZXJzXG4gICAgICBhY3RpdmVTdGF0ZSA9IHN0YXRlXG4gICAgICBpZiBvcHRpb25zLm5hdmlnYXRlICYmICFzdGF0ZS5hYnN0cmFjdCAmJiBzdGF0ZS5yb3V0ZVxuICAgICAgICBAcm91dGVyLm5hdmlnYXRlIHN0YXRlLmdlbmVyYXRlUm91dGUgcGFyYW1ldGVyc1xuICAgICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgcmVnaXN0ZXJTdGF0ZTogKHN0YXRlKSAtPlxuICAgICAgbmFtZSA9IHN0YXRlLmdlbmVyYXRlTmFtZSgpXG4gICAgICBpZiBzdGF0ZXNbc3RhdGUuZ2VuZXJhdGVOYW1lKCldXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3RhdGUgd2l0aCBuYW1lIFwiJyArIG5hbWUgKyAnXCIgYWxyZWFkeSBleGlzdHMuJylcbiAgICAgIHN0YXRlc1tzdGF0ZS5nZW5lcmF0ZU5hbWUoKV0gPSBzdGF0ZVxuICAgICAgaWYgKHN0YXRlLnJvdXRlIG9yIHN0YXRlLnJvdXRlPT0nJykgJiYgIXN0YXRlLmFic3RyYWN0XG4gICAgICAgIEByb3V0ZXIucm91dGUgc3RhdGUuZ2VuZXJhdGVSb3V0ZVN0cmluZygpLCBzdGF0ZS5nZW5lcmF0ZU5hbWUoKSxcbiAgICAgICAgICAtPlxuICAgICAgICAgICAgX2FyZ3VtZW50cyA9IGFyZ3VtZW50c1xuICAgICAgICAgICAgcGFyYW1ldGVycyA9IHt9XG4gICAgICAgICAgICBtYXRjaGVzID0gc3RhdGUuZ2VuZXJhdGVSb3V0ZVN0cmluZygpLm1hdGNoKC86KFthLXpBLVowLTlcXC1fXSspL2cpXG4gICAgICAgICAgICBpZiBtYXRjaGVzXG4gICAgICAgICAgICAgIGZvciBuYW1lLCBpbmRleCBpbiBtYXRjaGVzXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyc1tuYW1lLnN1YnN0cmluZygxKV0gPSBfYXJndW1lbnRzW2luZGV4XVxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmFjdGl2YXRlIHBhcmFtZXRlcnNcblxuICAgIGdldFN0YXRlOiAobmFtZSktPlxuICAgICAgc3RhdGVzW25hbWVdXG5cbiAgICBjbGVhcjogKCktPlxuICAgICAgYWN0aXZlU3RhdGU/LmdldFBhcmVudENoYWluKClbMF0uZGVhY3RpdmF0ZSgpXG4gICAgICBzdGF0ZXMgPSB7fVxuXG4gICAgY29uc3RydWN0b3I6IC0+XG4gICAgICBAY2xlYXIoKSJdfQ==