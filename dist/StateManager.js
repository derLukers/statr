define(['underscore', 'backbone.marionette'], function(_, marionette) {
  var StateManager;
  return window.foo = new (StateManager = (function() {
    var activeState, states;

    states = {};

    activeState = null;

    StateManager.prototype.router = new Marionette.AppRouter();

    StateManager.prototype.go = function(name, parameters, options) {
      var state;
      if (options == null) {
        options = {
          navigate: true
        };
      }
      if (!states[name]) {
        throw new Error('No State with name "' + name + "' found.");
      }
      state = states[name];
      state.activate(parameters);
      activeState = state;
      if (options.navigate && !state.abstract && state.route) {
        return this.router.navigate(state.generateRoute(parameters));
      }
    };

    StateManager.prototype.registerState = function(state) {
      var name;
      name = state.generateName();
      if (states[state.generateName()]) {
        throw new Error('State with name "' + name + '" already exists.');
      }
      states[state.generateName()] = state;
      if (state.route && !state.abstract) {
        return this.router.route(state.generateRouteString(), state.generateName(), function(parameters) {
          var _arguments;
          _arguments = arguments;
          parameters = _.object(_.map(state.generateRouteString().match(/:([a-zA-Z0-9\-_]+)/g), function(name, index) {
            return [name.substring(1), _arguments[index]];
          }));
          return state.activate(parameters);
        });
      }
    };

    StateManager.prototype.getState = function(name) {
      return states[name];
    };

    StateManager.prototype.clear = function() {
      if (activeState != null) {
        activeState.getParentChain()[0].deactivate();
      }
      return states = {};
    };

    function StateManager() {
      this.clear();
    }

    return StateManager;

  })());
});

//# sourceMappingURL=data:application/json;base64,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Q0wsV0FBVyxDQUFFLGNBQWIsQ0FBQSxDQUE4QixDQUFBLENBQUEsQ0FBRSxDQUFDLFVBQWpDLENBQUE7T0FBQTthQUNBLE1BQUEsR0FBUyxHQUZKO0lBQUEsQ0EzQlAsQ0FBQTs7QUErQmEsSUFBQSxzQkFBQSxHQUFBO0FBQ1gsTUFBQSxJQUFDLENBQUEsS0FBRCxDQUFBLENBQUEsQ0FEVztJQUFBLENBL0JiOzt3QkFBQTs7UUFGRDtBQUFBLENBRkgsQ0FBQSxDQUFBIiwiZmlsZSI6IlN0YXRlTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZSBbXG4gICd1bmRlcnNjb3JlJywgJ2JhY2tib25lLm1hcmlvbmV0dGUnXG5dLCAoXywgbWFyaW9uZXR0ZSkgLT5cbiAgd2luZG93LmZvbyA9IG5ldyBjbGFzcyBTdGF0ZU1hbmFnZXJcbiAgICBzdGF0ZXMgPSB7fVxuICAgIGFjdGl2ZVN0YXRlID0gbnVsbFxuICAgIHJvdXRlcjogbmV3IE1hcmlvbmV0dGUuQXBwUm91dGVyKClcbiAgICBnbzogKG5hbWUsIHBhcmFtZXRlcnMsIG9wdGlvbnMgPSB7bmF2aWdhdGU6IHRydWV9KSAtPlxuICAgICAgdW5sZXNzIHN0YXRlc1tuYW1lXVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IgJ05vIFN0YXRlIHdpdGggbmFtZSBcIicgKyBuYW1lICsgXCInIGZvdW5kLlwiXG4gICAgICBzdGF0ZSA9IHN0YXRlc1tuYW1lXVxuICAgICAgc3RhdGUuYWN0aXZhdGUgcGFyYW1ldGVyc1xuICAgICAgYWN0aXZlU3RhdGUgPSBzdGF0ZVxuICAgICAgaWYgb3B0aW9ucy5uYXZpZ2F0ZSAmJiAhc3RhdGUuYWJzdHJhY3QgJiYgc3RhdGUucm91dGVcbiAgICAgICAgQHJvdXRlci5uYXZpZ2F0ZSBzdGF0ZS5nZW5lcmF0ZVJvdXRlIHBhcmFtZXRlcnNcblxuICAgIHJlZ2lzdGVyU3RhdGU6IChzdGF0ZSkgLT5cbiAgICAgIG5hbWUgPSBzdGF0ZS5nZW5lcmF0ZU5hbWUoKVxuICAgICAgaWYgc3RhdGVzW3N0YXRlLmdlbmVyYXRlTmFtZSgpXVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0YXRlIHdpdGggbmFtZSBcIicgKyBuYW1lICsgJ1wiIGFscmVhZHkgZXhpc3RzLicpXG4gICAgICBzdGF0ZXNbc3RhdGUuZ2VuZXJhdGVOYW1lKCldID0gc3RhdGVcbiAgICAgIGlmIHN0YXRlLnJvdXRlICYmICFzdGF0ZS5hYnN0cmFjdFxuICAgICAgICBAcm91dGVyLnJvdXRlIHN0YXRlLmdlbmVyYXRlUm91dGVTdHJpbmcoKSwgc3RhdGUuZ2VuZXJhdGVOYW1lKCksIChwYXJhbWV0ZXJzKS0+XG4gICAgICAgICAgX2FyZ3VtZW50cyA9IGFyZ3VtZW50c1xuICAgICAgICAgIHBhcmFtZXRlcnMgPSBfLm9iamVjdCBfLm1hcCBzdGF0ZS5nZW5lcmF0ZVJvdXRlU3RyaW5nKCkubWF0Y2goLzooW2EtekEtWjAtOVxcLV9dKykvZyksIChuYW1lLCBpbmRleCktPlxuICAgICAgICAgICAgW25hbWUuc3Vic3RyaW5nKDEpLCBfYXJndW1lbnRzW2luZGV4XV1cbiAgICAgICAgICBzdGF0ZS5hY3RpdmF0ZSBwYXJhbWV0ZXJzXG5cbiAgICBnZXRTdGF0ZTogKG5hbWUpLT5cbiAgICAgIHN0YXRlc1tuYW1lXVxuXG4gICAgY2xlYXI6ICgpLT5cbiAgICAgIGFjdGl2ZVN0YXRlPy5nZXRQYXJlbnRDaGFpbigpWzBdLmRlYWN0aXZhdGUoKVxuICAgICAgc3RhdGVzID0ge31cblxuICAgIGNvbnN0cnVjdG9yOiAtPlxuICAgICAgQGNsZWFyKCkiXX0=